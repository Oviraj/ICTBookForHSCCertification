<resources>


    <string name="app_name">ICT Book For HSC Certification</string>
    <string name="title_activity_home">ICT Book For HSC Certification</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="action_settings">Settings</string>


    <!-- TODO: Chapter name -->
   <string name="Chapter_One_Name">তথ্য ও যোগাযোগ প্রযুক্তিঃ বিশ্ব ও বাংলাদেশ প্রেক্ষিত</string>
<string name="Chapter_Two_Name">কমিউনিকেশন সিস্টেম ও নেটওয়ার্কিং </string>
<string name="Chapter_Three_Name">সংখ্যা পদ্ধতি ও ডিজিটাল ডিভাইস </string>
<string name="Chapter_Four_Name">ওয়েব ডিজাইন পরিচিত ও HTML</string>
<string name="Chapter_Five_Name">প্রোগ্রামিং ভাষা </string>
<string name="Chapter_Six_Name">ডাটাবেজ ম্যানেজমেন্ট সিস্টেম </string>



    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

       <string name="programOne">আজকের দিনে বহু ধরনের কম্পিউটার আমরা হরহামেশাই ব্যবহার করে চলেছি। আপনার বাড়িতে কিংবা কর্মক্ষেত্রে যেমন আপনি দৈনন্দিন নানা কাজে ব্যাবহার করছেন ডেস্কটপ কিংবা ল্যাপটপ, তেমনি আপনার পকেটে বা হাতের মুঠোয় যে মোবাইল ফোন বা ট্যাবলেট রয়েছে সেগুলোও কিন্তু এক একটি কম্পিউটার। আবার আপনি যে এই ই লার্নিং প্ল্যাটফর্মটি আপনার কম্পিউটারের ব্রাউজারে ইন্টারনেট এর মাধ্যমে ব্যাবহার করছেন এবং প্রোগ্রামিং শিখতে ও প্রাকটিস করতে যাচ্ছেন, সেই প্ল্যাটফর্মটিও কিন্তু একাধিক সার্ভার কম্পিউটার মিলে পরিচালনা করা হচ্ছে।
সকল ডিজিটাল কম্পিউটারই আসলে একটি ইলেক্ট্রনিক ডিভাইস যা তথ্য বা ইনফরমেশন সংরক্ষণ করা, এক যায়গা থেকে অন্যত্র পাঠানো ও এই ইনফরমেশন প্রসেস করে নানা কাজ করে থাকে। বিভিন্ন ধরনের ডাটা এই কম্পিউটার প্রসেস করে থাকে। যেমনঃ
\n\n•	সংখ্যা বা numeric data (গাণিতিক, বৈজ্ঞানিক উপাত্ত ইত্যাদি)
\n•	টেক্সট বা character data (লিখালেখি, নাম-ঠিকানা, তথ্য ইত্যাদি)
\n•	ভিসুয়াল বা graphic data (ভিডিও, ছবি, এনিমেশন, চার্ট ইত্যাদি)
\n•	শব্দ বা audio data (গান ইত্যাদি)
\n•	ইত্যাদি
\n\nতবে একজন প্রোগ্রামারের জন্য সবচাইতে বহুল প্রচলিত ডাটা হল সংখ্যা ও টেক্সট, কেননা বৈজ্ঞানিক ও টেকনিক্যাল এপ্লিকেশন সমূহ অধিকাংশ ক্ষেত্রে সংখ্যা নিয়ে কাজ করে। এছাড়া অধিকাংশ ব্যবসায়িক কর্মকান্ড যেখানে কম্পিউটার সফটওয়ার ব্যবহৃত হয়, সেখানে সংখ্যা ও টেক্সট নিয়েই কাজ করতে হয়।
</string>
        <string name="programTwo">\nকম্পিউটার কিভাবে ডাটা প্রসেস করবে অথবা তা নিয়ে কি কাজ করে দিবে, তা কম্পিউটারকে বিশেষ সাংকেতিক ভাষায় কমান্ড হিসেবে লিখে দিতে হয়। আর এই কাজটিকেই বলা হয় প্রোগ্রামিং। যিনি এই কমান্ডগুলো কম্পিউটারের বোধগম্য ভাষায় লিখে দেন এবং এর মাধ্যমে কম্পিউটারকে দিয়ে কাজটি করিয়ে নেন বা অন্য সাধারণ মানুষ যেন ঐ কাজটি করে নিতে পারে তার জন্য প্রোগ্রামটি তৈরি করেন, তাকে বলা হয় প্রোগ্রামার। আর যে ভাষায় তিনি কম্পিউটারকে এই নির্দেশগুলো লিখে দেন, তাকে বলা হয় প্রোগ্রামিং ল্যাঙ্গুয়েজ বা প্রোগ্রামিং ভাষা। \n
একজন প্রোগ্রামার চাইলে তার নির্দেশ বা কমান্ডগুলোর সমন্বয় যে প্রোগ্রাম সেটিকে কম্পিউটারেই সেভ করে রাখতে পারেন। যেন পরবর্তিতে যেকোন সময় সেটিকে ব্যবহার করা যায়। একটি সেভ করা প্রোগ্রামকে যখন চালানো হয় তখন তাকে বলা হয় রান করা (Run) বা এক্সিকিউট করা (execute)। একটি প্রোগ্রাম এক্সিকিউট করলে নিম্নের ঘটনাটি ঘটেঃ\n
\n1.	কম্পিউটার আপনার প্রোগ্রামটিতে লিখিত কমান্ডগুলো তার মেমরিতে একের পর এক সাজিয়ে নেয়। \n
2.	তারপর প্রয়োজনে আপনার কাছ থেকে ইনপুট নেয় যা আপনি কি বোর্ড, মাউস ইত্যাদির সাহায্যে আপনার প্রোগ্রামটিকে দেন\n
3.	তারপর আপনার প্রোগ্রামটি উক্ত ইনপুট ডাটা প্রসেস করে ও কিছু আউটপুট তৈরি করে\n
4.	তারপর আপনার আউটপুট টি কোন কাগজে অথবা কম্পিউটারের স্ক্রিনে প্রিন্ট করে দেখায়। \n\n
একটি প্রোগ্রাম একবার লিখে অসংখ্যবার এক্সিকিউট করা যায়। সুতরাং একটি নির্দিষ্ট কাজের জন্য একটি প্রোগ্রাম একবার লিখে নিলেই যথেষ্ট, তারপর সেটিকে বারবার একই কাজ করতে ব্যাবহার করা সম্ভব। \n
\n</string>
    <string name="CprogramOne">আপনি যখন কোন সমস্যা সমাধান করবেন, তখন আপনাকে কিছু ধাপে ধাপে এগোতে হবে। প্রথমে আপনি সমস্যাটি কি, তা নির্ধারন করবেন। আপনি যদি সমস্যাটিই ঠিকমত না বোঝেন তাহলে তা সমাধান করা অসম্ভব। যখন আপনি জানবেন যে সমস্যাটি কি, তখনই কেবল আপনি তা সমাধান করার জন্য প্ল্যান করতে পারবেন। আর আপনার প্ল্যানের মাধ্যমেই আপনি সমাধানটি বাস্তবে প্রয়োগ করতে পারবেন। আর আপনার প্ল্যানের বাস্তব প্রয়োগ ঘটাবার পর এর ফলাফল আপনাকে পরীক্ষা করে দেখতে হবে যে আসলেই তা সমস্যাটি সমাধান করেছে কিনা। যদি না হয়, হয়তো আপনি খতিয়ে দেখবেন যে আপনার প্রয়োগ পদ্ধতিতে কোন সমস্যা ছিল নাকি আপনার প্ল্যানটি সঠিক ছিলনা। এভাবে সমস্যাটি সমাধান না হওয়া পর্যন্ত হয়তো আপনি  আপনার পরিকল্পনা ও প্রয়োগ পদ্ধতিকে সংস্কার করে আবার চেষ্টা করবেন।\n
এমনি করে যেমন আপনি বাস্তব জীবনের অনেক ক্ষেত্রে নানান সমস্যার সমাধান করতে পারেন, ঠিক তেমনি প্রোগ্রামিং ও অনেকটা কোন সমস্যা সমাধানের মতই। যখন আপনি একটি সি প্রোগ্রাম (বা যেকোন কম্পিউটার প্রোগ্রাম) লিখবেন, আপনাকে অনেকটা একই রকম ধাপগুলো অনুসরণ করতে হবেঃ \n
\n•	প্রোগ্রামটি কি কাজ করবে তা যথাযথভাবে নির্ধারন করা\n
•	প্রোগ্রামটি লিখতে আপনি কি ধরনের পদ্ধতি অনুসরণ করবেন তা ঠিক করা\n
•	প্রোগ্রামটি তৈরি করা অর্থাৎ কোড লিখে ফেলা\n
•	প্রোগ্রামটি রান করানো এবং ফলাফল দেখে যাচাই করা যে প্রোগ্রামটি তার কাজটি সঠিকভাবে করতে পারছে কিনা\n\n
উদাহরণস্বরূপ, প্রোগ্রামটির নির্ধারিত কাজ হতে পারে এমন যে এটি আপনাকে অংক করে দেবে, অথবা স্ক্রিনে আপনার নাম দেখাবে, অথবা একটি রোবটকে পরিচালনা করবে, অথবা নিজে আপনার গাড়িটি ড্রাইভার ছাড়াই চালিয়ে দেবে, অথবা আপনার বন্ধুর সাথে বার্তা আদান প্রদান করতে সহায়তা করবে ইত্যাদি। সহজ অথবা কঠিন যাই হোক না কেন, আপনার প্রোগ্রামটির অবশ্যই একটি নির্ধারিত লক্ষ্য থাকা চাই। সুতরাং লক্ষ্য নির্ধারন করা হয়ে যাওয়া মানে আপনি অত্যন্ত গুরুত্বপুর্ন প্রথম ধাপটি শেষ করেছেন। \n
দ্বিতীয় ধাপ হল, আপনি প্রোগ্রামটি লিখতে কি পদ্ধতি অনুসরণ করবেন। কি কি তথ্য আপনার প্রয়োজন হবে, কি কি ফরমুলা আপনি ব্যবহার করবেন এবং কিভাবে তা প্রোগ্রামটিতে প্রয়োগ করবেন। উদাহরণস্বরূপ, ধরুন আপনি একটি প্রোগ্রাম লিখতে চাচ্ছেন, যা কিনা একটি বৃত্তের ক্ষেত্রফল বলে দিতে পারবে। প্রথম ধাপটি হয়ে গেছে, কেননা আপনি আপনার প্রোগ্রামের কাজটি কি তা নির্ধারন করে ফেলেছেন। দ্বিতীয় ধাপ হচ্ছে আপনার কি কি তথ্য জানতে হবে একটি বৃত্তের ক্ষেত্রফল বের করতে গেলে। এক্ষেত্রে ধরে নিন এই প্রোগ্রামটির ব্যবহারকারী বৃত্তের ব্যাসার্ধটি লিখে দেবেন, তাহলে বৃত্তের ব্যাসার্ধ থেকে ক্ষেত্রফল বের করবার সূত্রটি আপনার জানা থাকতে হবে যদি আপনি প্রোগ্রামটিকে দিয়ে সঠিক ক্ষেত্রফল বের করতে চান। এখন আপনার যা যা জানা প্রয়োজন তা আপনি জেনেছেন, সুতরাং আপনি ৩ ও ৪ নং ধাপের কাজ শুরু করতে পারেন।\n
</string>
    <string name="CprogramTwo">প্রোগ্রাম তৈরির পদ্ধতির আবার নিজস্ব কিছু ধাপ রয়েছে। প্রথম ধাপ হল আপনাকে কোড লিখবার জন্য একটি
        টেক্সট এডিটর ব্যবহার করতে হবে, যেখানে আপনি আপনার প্রোগ্রামটি লিখবেন। যেকোন সাধারণ টেক্সট এডিটরেই প্রোগ্রাম লিখা সম্ভব,
        তবে প্রোগ্রামিং কে সহজ ও দ্রুততর করতে প্রোগ্রামিং এর জন্য বিশেষভাবে তৈরি কোড এডিটর ব্যবহারের বিকল্প নেই।\n\n
এই ই-শিক্ষা প্ল্যাটফর্মের কোডল্যাব তেমনি একটি অনন্য অনলাইন কোড এডিটর যা শুধু আপনার প্রোগ্রাম লিখার কাজকে সহজ ও দ্রুততরই
        করবে না, বরং এর পাশাপাশি আপনাকে একজন প্রফেশনাল প্রোগ্রামার হিসেবে গড়ে তুলতে আপনার কোডিং স্টাইল ও কোড রিডেবিলিটি আন্তর্জাতিক
        মানের হচ্ছে কিনা তা অনবরত যাচাই করে আপনার ভুলগুলো ধরিয়ে দিবে। এই সুবিধা এখন পর্যন্ত বিশ্বের অন্য কোন অনলাইন কোড
        এডিটরে নেই। গুগলের সি কোডিং স্ট্যান্ডার্ড অনুযায়ী এই এডিটর আপনাকে সাজেশন দেবে কি করে আপনার কোডটিকে আরও উন্নতমানের করা যায়।
        এছাড়াও আপনার সাম্প্রতিক পারফর্মেন্স বিবেচনা করে এই প্ল্যাটফর্মের কৃত্তিম বুদ্ধিমত্তা আপনার দুর্বলতাগুলো খুঁজে বের করবে এবং তদনুযায়ী
        আপনাকে পরামর্শ দেবে আপনার কোন পাঠটি আরও ভাল করে পড়ে নেওয়া উচিত, কিংবা অনলাইনে আর কোথা থেকে আপনি বিষয়টি আরও বিশদভাবে
        বুঝে নিতে পারেন তার ঠিকানা জানিয়ে দেবে। \n\n
একটি প্রোগ্রাম লিখতে গিয়ে টেক্সট এডিটরে আপনি যে কোড লিখবেন, তাকে বলা হয় সোর্স
        কোড। সোর্স কোড হচ্ছে বেশ কিছু আদেশ বা কমান্ড এর সমন্বয়
        যা কিনা কম্পিউটারকে একের পর এক করতে বলা হয়। সোর্স কোড লিখা হয়ে গেলে তার পরের ধাপ হচ্ছে কোডটি রান করা বা চালিয়ে দেখা। সোর্স
        কোডের কমান্ডগুলো আপনি আপনার কোড এডিটরে লিখে যখন রান করবেন,
        তখন সি প্রোগ্রামিং ভাষার কম্পাইলার আপনার সি ভাষায় লিখিত প্রোগ্রামটিকে কম্পিউটারের ভাষায় অনুবাদ করবে।
        কম্পিউটারের ভাষায় ট্রান্সলেট করার পর কম্পাইলার সেই মেশিন কোডটি লিংকার নামের আরেকটি প্রসেসিং স্টেপ এর মধ্যে দিয়ে নিয়ে
        একটি প্রোগ্রাম এক্সিকিউটেবল ফাইল তৈরি করবে এবং সেটিকে কম্পিউটারের মেমোরীতে লোড করবে আপনার প্রোগ্রামটি রান করার জন্য।
        তারপর আপনার কম্পিউটারের প্রসেসর মেমোরী থেকে একটির পর একটি কমান্ড পড়বে এবং আপনার কোডে যা করতে বলা হয়েছে তা করতে শুরু
        করবে। এর পরবর্তী ধাপ হল আপনি দেখবেন যে আপনার যে কাজটি করা লক্ষ্য ছিল, সেটি আপনার প্রোগ্রাম কম্পিউটারকে দিয়ে ঠিকঠাক করে নিতে
        পারছে কিনা। \n
</string>
    <string name="CprogramThree1">আমরা এখন একটি প্রোগ্রাম লিখে ফেলব, যেটি আউটপুট স্ক্রিনে Hello World দেখাবে বা প্রিন্ট করবে। পৃথিবীর অধিকাংশ প্রোগ্রামারই জীবনের প্রথম প্রোগ্রাম হিসেবে এটি লেখে। আমরা এই প্রোগ্রামটি এবং পরবর্তীতে অন্যান্য প্রোগ্রামের কোড চালানোর জন্য এই ওয়েবসাইটের কোডল্যাব এ যাবো এবং এর অত্যাধুনিক কোড এডিটরটি ব্যবহার করবো। \n
চলুন তাহলে আমরা কোডল্যাবে যাই এবং নিচের কোডটি টাইপ করে লিখে ফেলিঃ \n
</string>
    <string name="CprogramThree2">এবার লিখা হয়ে গেলে "রান করুন" নামের বাটনটিতে ক্লিক করুন। কিছুক্ষণের মধ্যেই দেখতে পাবেন এর নিচে আউটপুটের ঘরে আপনার "Hello World" মেসেজটি দেখা যাচ্ছে। প্রোগ্রামিং এর ভাষায় আউটপুটে কোন কিছু দেখানোকে প্রিন্ট করা বলে। এখানে প্রিন্ট করা বলতে কাগজে প্রিন্ট করা বোঝাচ্ছে না যা কিনা প্রিন্টার মেশিন করে থাকে। প্রোগ্রামিং এর ভাষায় প্রিন্ট করা মানে আউটপুটে দেখানো। \n
আপনি যদি প্রোগ্রামটি ঠিকঠাকভাবে রান করাতে পারেন এবং Hello World লেখাটা দেখে থাকেন তাহলে আপনাকে অভিনন্দন। \n
</string>
    <string name="CprogramFour1">চলুন এখন একে একে ব্যাখ্যা করা যাক লাইনগুলো।\n
প্রথম লাইন ছিল: #include stdio.h, এখানে stdio.h একটি হেডার ফাইল। এখানে এই হেডার ফাইলটিকে আমাদের প্রোগ্রামে সংযুক্ত করার জন্য বলা হয়েছে। এটি কেন লিখেছি একটু পরে বলছি।\n\n

দ্বিতীয় লাইন ফাঁকা। দেখতে ভাল  লাগে তাই। ফাঁকা না রাখলে কাজ করতো, কিন্তু প্রোগ্রামটি পড়তে সুবিধা হয় ফাঁকা রাখলে তাই রাখা। \n\n

তৃতীয় লাইন: int main()। এটিকে বলে মেইন ফাংশন। সি প্রোগ্রামগুলো মেইন ফাংশন থেকে কাজ করা শুরু করে, তাই সব প্রোগ্রামে একটি (এবং কেবল একটি) মেইন ফাংশন থাকতে হয়। মেইন ফাংশনের শুরুতে দ্বিতীয় বন্ধনী “{“ দিয়ে শুরু করতে হয় আর শেষও করতে হয় একটি দ্বিতীয় বন্ধনী “}” দিয়ে। শেষ করার আগে আমরা return 0; লিখেছি, সেটি কেন এখন ব্যাখ্যা না করলেই ভালো হয়, ফাংশন নিয়ে যখন আলাপ করব তখন বলব। আপাতত আমরা যেকোনো প্রোগ্রামে নিচের অংশটুকু লিখে ফেলবো, এবং { ব্র্যাকেট শুরু করার পর এবং return 0; লেখার আগে যে অংশটুকু আছে, সেখানেই আমাদের প্রয়োজনীয় প্রোগ্রামটুকু লিখব।\n

</string>
<string name="cprogramfour2">\nপ্রোগ্রামের পরের লাইনটি খেয়াল করুন: printf("Hello World"); এটি একটি স্টেটমেন্ট। এখানে printf() হচ্ছে একটি ফাংশন যার কাজ হচ্ছে স্ক্রিনে কিছু প্রিন্ট করা। ডাবল কোটেশন চিহ্নের ভেতরে যা লিখবেন তা-ই স্ক্রিনে সে প্রিন্ট করবে।\n\n

printf ফাংশনটি স্ক্রিনে প্রিন্ট করে কীভাবে সেটি আসলে বলা আছে stdio.h ফাইলে। এই ফাইলগুলোকে বলে হেডার (header) ফাইল (.h হচ্ছে হেডার ফাইলের এক্সটেনশন)। stdio.h ফাইলে স্ট্যান্ডার্ড ইনপুট আর আউটপুট-সংক্রান্ত যাবতীয় ফাংশন লেখা আছে। এই ফাংশনগুলোকে ব্যবহার করার জন্য আমাদেরকে এই হেডার ফাইলকে সংযুক্ত করতে হয়। যেহেতু printf() ফাংশন ব্যবহার করেছি, তাই প্রোগ্রামের শুরুতে #include stdio.h লিখতে হয়েছে। আপাতত আমরা কেবল ফাংশনগুলো ব্যবহার করব, ফাংশনগুলো কীভাবে কাজ করে সেটি এখন আমাদের জানার দরকার নেই। এই রকম আরও অনেক প্রয়োজনীয় হেডার ফাইল আছে, যার কিছু আমরা পরবর্তী সময়ে কাজের প্রয়োজনে দেখব।\n\n

এখন একটি ব্যাপার খেয়াল করুন। printf("Hello World");-এর শেষে একটি সেমিকোলন রয়েছে। সি ল্যাঙ্গুয়েজে প্রতিটি স্টেটমেন্টের পরেই একটি সেমিকোলন থাকে। একটি স্টেটমেন্টের কাজ শেষ হলে পরের স্টেটমেন্টের কাজ শুরু হয়। return 0; এই লাইনটিও একটি স্টেটমেন্ট, তাই এটিও সেমিকোলন দিয়ে শেষ করতে হয়েছে। শুরুর দিকে অনেকেই সেমিকোলন দিতে ভুলে যায়, তখন কম্পাইল এরর (compile error) হয়। আপনি একটি সেমিকোলন মুছে দিয়ে রান করার চেষ্টা করে দেখতে পারেন। \n

</string>
    <string name="oparetorone">\nআমরা ইতোমধ্যেই দেখেছি যে কন্সটান্ট, ভ্যারিয়েবল, এরে এলিমেন্টস এবং ফাংশন রেফারেন্সসমূহ বিভিন্ন অপারেটর
        এর সাহায্যে একত্রিত করে এক্সপ্রেশন তৈরি করা হয়। সি তে যেসকল অপারেটর রয়েছে তাদেরকে বেশ কয়েক ভাগ্যে ভাগ করা যায়। যেমন এরিথমেটিক
        অপারেটর, ইউনারি অপারেটর, রিলেশনাল ও লজিক্যাল অপারেটর, এসাইনমেন্ট অপারেটর, কন্ডিশনাল অপারেটর ইত্যাদি। যে সকল ডাটা আইটেম এর
        উপর অপারেটর সমূহ কাজ করে, তাদের বলা হয় অপারেন্ড। \n</string>
<string name="oparetortwo">\nসি তে ৫ টি এরিথমেটিক অপারেটর রয়েছে\n
5. অপারেটরকে অনেক ক্ষেত্রে মডিউলাস অপারেটর ও বলা হয়। সি তে কোন এক্সপনেনশিয়াল অপারেটর নেই, কিন্তু এক্সপনেনশিয়াল অপারেশন করতে pow নামে একটি লাইব্রেরি ফাংশন রয়েছে। এরিথমেটিক অপারেটরগুলোর অপারেন্ডগুলো অবশ্যই সংখ্যা হতে হবে। সুতরাং অপারেন্ডগুলো ইন্টেজার বা ভগ্নাংশ সংখ্যা হতে হবে। \n\n
অপারেন্ডগুলো ক্যারেক্টার টাইপ হলে সমস্যা নেই যেহেতু ক্যারেক্টার আসলে ইন্টেজার সংখ্যা দিয়েই প্রকাশ করা হয়। উদাহরণ হিসেবে বলা যায়, একটি ক্যারেক্টার এর সাথে যদি ১ যোগ করা হয়, তাহলে তা আসলে ঐ ক্যারেক্টার এর সাংখ্যিক মানের সাথে ১ যোগ করলে যে ক্যারেক্টারের মান দ্বারায় সেই ক্যারেক্টার বোঝানোর সামিল। যেমন A + 1 এর মান হবে B.\n\n
আপনি যদি A থেকে Z পর্যন্ত স্ক্রিন এ প্রিন্ট করতে চান, তাহলে এভাবে সংখ্যার ব্যাবহার করে করতে পারেন। যেমন আপনি চাইলে A এর মান থেকে শুরু করে Z এর মান পর্যন্ত লুপ চালিয়ে প্রতিবার ক্যারেক্টার ভ্যারিয়েবলে এক যোগ করে প্রিন্ট করতে পারেন। \n\n
ভাগশেষ বা মডিউলাস অপারেটর এর অপারেন্ডগুলো ইন্টেজার হতে হবে এবং দ্বিতীয় অপারেন্ড অবশ্যই ০ হতে পারবেনা। যেমন একটি ভ্যারিয়েবল num এর মান যদি ৫ হয় তাহলে num%3 এর মান হবে ২। একই ভাবে একটি সংখ্যা জোড় কি বেজোড় তা বোঝা সম্ভব তাকে ২ দিয়ে ভাগ করলে ভাগশেষ ০ নাকি ১ হয়। \n\n
ভাগ অপারেটর একটু ভিন্নভাবে কাজ করে। যেমন ০ দিয়ে ভাগ যেহেতু অনির্নেয়, তাই ০ দিয়ে ভাগ করলে আপনার প্রোগ্রাম রানটাইম এরর দেখাবে। এছাড়া আপনার অপারেন্ড দুটি যদি ইন্টেজার হয়, তাহলে ভাগফল সবসময় ইন্টেজার হবে। অর্থাৎ 3/2 এর মান 1.5 না হয়ে 1 হবে। একই ভাবে 11/3 এর মান 3 হবে। আপনি যদি এই ক্ষেত্রে ভগ্নাংশ মান চান, তাহলে অন্তত একটি অপারেন্ড ফ্লোটিং পয়েন্ট বা ডাবল টাইপ এর হতে হবে। যেমন 3/2.0 অথবা 3.0/2 অথবা 3.0/2.0 এর মান হবে 1.5. সুতরাং আপনি যদি দুটি ইন্টেজার ভ্যারিয়েবলের ভাগফল ভগ্নাংশ চান, তাহলে হয় যেকোন একটি ভ্যারিয়েবলকে float বা double এ কাস্ট করতে পারেন। \n
</string>
    <string name="flowchart">প্রোগ্রাম ফ্লোচার্ট\n
সাধারণত ফ্লোচার্টকে দুই ভাগে ভাগ করা হয়। সিস্টেম ফ্লোচার্ট ও প্রোগ্রাম ফ্লচার্ট। কম্পিউটার প্রোগ্রাম লেখার ক্ষেত্রে প্রোগ্রাম ফ্লোচার্ট ব্যবহার করা হয়। এই ফ্লোচার্টে প্রোগ্রাম প্রক্রিয়াকরণের কাজগুলো ধারাবাহিকভাবে ব্যাখ্যা করা হয়। প্রোগ্রাম ফ্লচার্টে ব্যবহৃত প্রতীকগুলো অর্থসহ দেয়া হলোঃ\n\n
</string>
    <string name="flow">নিচের প্রোগ্রামটির মাধ্যমে কোনো প্রতিষ্ঠানের কর্মচারীদের বেতন হিসাব করার পদ্ধতি দেখানো হলোঃ</string>
    <string name="flow1">১+২+৩+……………+N সিরিজটির যোগফল নির্ণয়ের জন্য এলগোরিদম এবং ফ্লোচার্ট তৈরি কর। \n
অথবা ১ থেকে N পর্যন্ত সকল ক্রমিক সংখ্যার যোগফল নির্ণয়ের জন্য এলগোরিদম এবং ফ্লোচার্ট তৈরি কর।
</string>
    <string name="flow2">এলগোরিদমঃ\n
ধাপ-১: শুরু\n
ধাপ-২: যে কোন একটি সংখ্যা N এর মান গ্রহণ কর।\n
ধাপ-৩: যোগফল নির্ণয়ের জন্য চলক S এবং ১, ২, ৩ ইত্যাদি নির্দিষ্ট করার জন্য চলক I(আই)  যাদের মান যথাক্রমে ০ এবং ১ ধর।\n
ধাপ-৪: S এবং I যোগ করে যোগফল S এ রাখ।\n
ধাপ-৫: I এর মান ১ করে বৃদ্ধি কর।\n
ধাপ-৬: I এর মান N থেকে ছোট বা N এর সমান হলে ধাপ-৪ এ যাও।\n
ধাপ-৭: যোগফল S ছাপাও।\n
ধাপ-৮: শেষ কর। \n
</string>
    <string name="flow3">দুটি সংখ্যার গসাগু নির্ণয়ের জন্য এলগোরিদম এবং ফ্লোচার্ট তৈরি কর। \n</string>
    <string name="flow4">এলগোরিদমঃ\n
ধাপ-১: শুরু \n
ধাপ-২: যে কোন দুটি সংখ্যা L এবং S এর মান গ্রহণ কর। \n
ধাপ-৩: L কে S দ্বারা ভাগ করে অবশিষ্ট (R=L MOD S) নির্ণয় কর। \n
ধাপ-৪: অবশিষ্ট R এর মান ০ হলে ধাপ-৭ এ যাও। অন্যথায় পরবর্তী ধাপে যাও।\n
ধাপ-৫: S এর মান L রাখ এবং R এর মান S রাখ। \n
ধাপ-৬: ধাপ-৩ এ যাও।\n
ধাপ-৭: গসাগু S ছাপাও।\n
ধাপ-৮: শেষ কর। \n
</string>
    <string name="flow5">একটি ধনাত্মক সংখ্যার ফ্যাক্টরিয়াল নির্ণয়ের জন্য এলগোরিদম এবং ফ্লোচার্ট তৈরি কর। \n</string>
    <string name="flow6">এলগোরিদমঃ\n
ধাপ-১: শুরু \n
ধাপ-২: যে কোন একটি সংখ্যা N এর মান গ্রহণ কর। \n
ধাপ-৩: ফ্যাক্টরিয়ালের ফলাফল রাখার জন্য চলক F এবং ১, ২, ৩ নির্দিষ্ট করার জন্য চলক I(আই) ধর এবং উভয়ের মান ১ ধর। \n
ধাপ-৪: F এবং I গুণ করে গুণফল F এ রাখ। \n
ধাপ-৫: I এর মান ১ করে বৃদ্ধি কর। \n
ধাপ-৬: I এর মান N থেকে ছোট বা N এর সমান হলে ধাপ-৪ এ যাও। \n
ধাপ-৭: ফ্যাক্টরিয়াল F ছাপাও। \n
ধাপ-৮: শেষ কর। \n
</string>
    <string name="flow7">যে কোন তিনটি সংখ্যার মধ্যে বড় সংখ্যাটি নির্ণয়ের জন্য এলগোরিদম এবং ফ্লোচার্ট তৈরি কর। \n</string>
    <string name="flow8">এলগোরিদমঃ\n
ধাপ-১: শুরু \n
ধাপ-২: সংখ্যা তিনটি a, b, c এর মাধ্যমে পড়। \n
ধাপ-৩: a এর মান b এর থেকে বড় হলে ধাপ-৬ এ যাও অন্যথায় পরবর্তী ধাপে যাও।  \n
ধাপ-৪: b এর মান c এর থেকে বড় হলে ধাপ-৯ এ যাও অন্যথায় পরবর্তী ধাপে যাও।  \n
ধাপ-৫: ধাপ-৭ এ যাও।\n
ধাপ-৬: a এর মান c এর থেকে বড় হলে ধাপ-১১ এ যাও অন্যথায় পরবর্তী ধাপে যাও। \n
ধাপ-৭: বড় সংখ্যা c ছাপাও।\n
ধাপ-৮:  ধাপ-১২ এ যাও।\n
ধাপ-৯: বড় সংখ্যা b ছাপাও।\n
ধাপ-১০: ধাপ-১২ এ যাও।\n
ধাপ-১১: বড় সংখ্যা a ছাপাও।\n
ধাপ-১২: শেষ কর। \n
</string>
</resources>
